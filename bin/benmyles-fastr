#!/usr/bin/env ruby

require 'rubygems'
require 'fastr'
require 'fileutils'

module Fastr
  def self.init_app(app_name)
    if File.directory? app_name
      puts "directory already exists"
      exit(0)
    end
    
    # Directory Structre

    dirs = ['app/config', 'app/controllers', 'app/views', 'app/models', 'lib', 'test', 'public', 'custom/plugins',
      'test/unit']
    dirs.each do |dir| 
      FileUtils.mkdir_p("#{app_name}/#{dir}")
    end 

    # Default Routes
    File.open("#{app_name}/app/config/routes.rb", "w") do |f|
      f.write("router.draw do |route|\n")
      f.write("\troute.for '/:controller/:action'\n")
      f.write("\t# route.for '/home/:action', :action => '[A-Za-z]+'\n")
      f.write("\t# route.for '/test', :to => 'home#index'\n")
    	f.write("\t# route.for '/users/:id', :to => 'users#create', :methods => [:post]\n")      
      f.write("end")
      f.close
    end

    # Rack file
    File.open("#{app_name}/config.ru", "w") do |f|
      f.puts("require 'fastr'")
      f.puts("EM.kqueue = true if EM.kqueue?")
      f.puts("EM.epoll = true if EM.epoll?")
      f.puts("fastrApp = Fastr::Application.new(::File.expand_path(::File.dirname(__FILE__)))")
      f.puts("app = lambda { |env|")
      f.puts("\tfastrApp.dispatch(env)")
      f.puts("}")
      f.puts("run app")
      f.close
    end
    
    # Settings file
    File.open("#{app_name}/app/config/settings.rb", "w") do |f|
      f.puts("config.log_level = Logger::DEBUG")
      f.puts("config.cache_templates = true")
      f.close
    end
    
    # Gemfile
    File.open("#{app_name}/Gemfile", 'a') do |f|
      f.puts "source :gemcutter"
      f.puts "gem 'fastr'"
      f.close
    end
    
    # init.rb
    File.open("#{app_name}/app/config/init.rb", "w") do |f|
      f.puts('# Enable AsyncRecord support (experimental)')
      f.puts("# you must add \"require 'async_record'\" to your config.ru file ")
      f.puts('#conn = AsyncRecord::Connection::MySQL.new(:host => "127.0.0.1", :port => 3306, :user => "root", :database => "database")')
      f.puts('#conn.connect')
      f.puts('#AsyncRecord::Base.set_connection(conn)')
    end
    
    # Rakefile
    File.open("#{app_name}/Rakefile", "w") do |f|
      f.puts("require 'fastr/test/tasks'")
    end
    
    # Test Helper
    File.open("#{app_name}/test/test_helper.rb", "w") do |f|
      f.puts("require 'rubygems'")
      f.puts("require 'fastr/test'")
      f.puts("require 'test/unit'")
      f.puts("require 'fastr'")
      f.puts("\nload(File.expand_path('../app/config/init.rb', File.expand_path(File.dirname(__FILE__))))")
    end
    
    puts "#{app_name} initialized!"
  end
  
  def self.usage
    puts "Initialize a fastr application."
    puts "Usage: fastr [init name] [generate controller name]"
  end
end

if ARGV.size == 0
  Fastr.usage
  exit(0)
end

command = ARGV[0]

if command == 'init' and ARGV.length == 2
  Fastr.init_app(ARGV[1])
elsif command == 'generate' and ARGV.length > 2
  what = ARGV[1]
  if what == 'controller' and ARGV.length == 3
    name = ARGV[2]
    path = "app/controllers/#{name}_controller.rb"
    if File.exists? path
      puts "Controller already exists."
      exit(0)
    end
    
    puts "Creating controller: #{path}"
    File.open(path, "w") do |f|
      f.puts("class #{name.camelcase}Controller < Fastr::Controller")
      f.puts("end")
      f.close
    end
    
    path = "test/unit/test_#{name}_controller.rb"
    puts "Creating test class: #{path}"
    File.open(path, "w") do |f|
      f.puts("require 'test_helper'\n\n")
      f.puts("class #{name.camelcase}ControllerTest < Test::Unit::TestCase")
      f.puts("\tinclude Fastr::Test::Controller\n\n")
      f.puts("\tdef test_something")
      f.puts("\t\tassert(true)")
      f.puts("\tend")
      f.puts("end")
      f.close
    end
  else
    puts "unknown generator: #{what}"
    Fastr usage
  end
else
  puts "Unknown command: #{command}"
  Fastr.usage
end



